/*
 * Copyright (C) 2018 jomartinez
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.improvisados.jmastermind.gui.dialogs;

import com.improvisados.jmastermind.gui.Theme;
import com.improvisados.jmastermind.gui.controllers.ThemeController;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.border.LineBorder;

public class JMMDialog extends javax.swing.JDialog {

    private Point initialClick;
    private int returnStatus;
    private int type;
    private List<JButton> buttons;
    /**
     * Creates new form MMDialog
     */
    public JMMDialog(int type,java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setUndecorated(true);
        initComponents();
        this.type=type;
        Theme theme=ThemeController.getInstance().getCurrentTheme();
        getRootPane().setBorder(new LineBorder(theme.getDefaultTokenColor()));
       getContentPane().setBackground(theme.getBackgroundColor());
       
      
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(JOptionPane.CANCEL_OPTION);
            }
        });
        
        buttons=new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                formMousePressed(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        initialClick = evt.getPoint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseDragged
    {//GEN-HEADEREND:event_formMouseDragged
         int thisX = this.getLocation().x;
            int thisY = this.getLocation().y;

            // Determine how much the mouse moved since the initial click
            int xMoved = evt.getX() - initialClick.x;
            int yMoved = evt.getY() - initialClick.y;

            // Move window to this position
            int X = thisX + xMoved;
            int Y = thisY + yMoved;
            this.setLocation(X, Y);
    }//GEN-LAST:event_formMouseDragged

    private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
    {//GEN-HEADEREND:event_formComponentResized
        
        if(buttons.size()>=1)
        {
            buttons.get(0).setLocation(getWidth()-buttons.get(0).getWidth()-Theme.SPACING,getHeight()-buttons.get(0).getHeight()-Theme.SPACING);
        }
        
        if(buttons.size()>=2)
        {
            buttons.get(1).setLocation(buttons.get(0).getX()-Theme.SPACING-buttons.get(1).getWidth(),buttons.get(0).getY());
        }
        
        
    }//GEN-LAST:event_formComponentResized

    public int getReturnStatus() {
        return returnStatus;
    }
    
    
    
    protected void ButtonsActionPerformed(java.awt.event.ActionEvent evt,int returnStatus)                                       
    {                                           
        doClose(returnStatus);
    }
    
    

    
     private void doClose(int returnState) {
        
        this.returnStatus=returnState;
        setVisible(false);
        dispose();
    }

     /*
    @Override
    public Dimension getPreferredSize()
    {
        return new Dimension(super.getPreferredSize().width,Theme.SPACING*3+Theme.TOKEN_SIZE*2); //To change body of generated methods, choose Tools | Templates.
    }
     */

    @Override
    public void setVisible(boolean b)
    {
        addButtons();
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
    }
     
     
     private void addButtons()
     {
          Theme theme=ThemeController.getInstance().getCurrentTheme();
          
          if(type==JOptionPane.YES_NO_OPTION)
       {
           JButton BYes=new JButton("Yes");
           BYes.setSize(85,Theme.TOKEN_SIZE);
           BYes.setLocation(getWidth()-BYes.getWidth()-Theme.SPACING,getHeight()-BYes.getHeight()-Theme.SPACING);
           BYes.setContentAreaFilled(false);
           BYes.setOpaque(true);
           BYes.setBackground(theme.getForegroundColor());
           BYes.setForeground(theme.getBackgroundColor());
           BYes.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   ButtonsActionPerformed(e,JOptionPane.YES_OPTION);
               }
           });
           add(BYes);
           buttons.add(BYes);
           
           JButton BNo=new JButton("No");
           BNo.setSize(85,Theme.TOKEN_SIZE);
           BNo.setLocation(BYes.getX()-Theme.SPACING-BNo.getWidth(),BYes.getY());
           BNo.setContentAreaFilled(false);
           BNo.setOpaque(true);
           BNo.setBackground(theme.getForegroundColor());
           BNo.setForeground(theme.getBackgroundColor());
           BNo.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   ButtonsActionPerformed(e,JOptionPane.NO_OPTION);
               }
           });
           add(BNo);     
          buttons.add(BNo);
       }
       else if(type==JOptionPane.OK_CANCEL_OPTION)
       {
           JButton BOk=new JButton("Ok");
           BOk.setSize(85,Theme.TOKEN_SIZE);
           BOk.setLocation(getWidth()-BOk.getWidth()-Theme.SPACING,getHeight()-BOk.getHeight()-Theme.SPACING);
           BOk.setContentAreaFilled(false);
           BOk.setOpaque(true);
           BOk.setBackground(theme.getForegroundColor());
           BOk.setForeground(theme.getBackgroundColor());
           BOk.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   ButtonsActionPerformed(e,JOptionPane.OK_OPTION);
               }
           });
           
           add(BOk);
           buttons.add(BOk);
           
           JButton BCancel=new JButton("Cancel");
            BCancel.setSize(85,Theme.TOKEN_SIZE);
           BCancel.setLocation(BOk.getX()-Theme.SPACING-BCancel.getWidth(),BOk.getY());
           BCancel.setContentAreaFilled(false);
           BCancel.setOpaque(true);
           BCancel.setBackground(theme.getForegroundColor());
           BCancel.setForeground(theme.getBackgroundColor());
           BCancel.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   ButtonsActionPerformed(e,JOptionPane.CANCEL_OPTION);
               }
           });
           add(BCancel);
           buttons.add(BCancel);
       }
       else if(type==JOptionPane.CLOSED_OPTION)
       {
           JButton BOk=new JButton("Ok");
           BOk.setSize(85,Theme.TOKEN_SIZE);
           BOk.setLocation(getWidth()-BOk.getWidth()-Theme.SPACING,getHeight()-BOk.getHeight()-Theme.SPACING);
           BOk.setContentAreaFilled(false);
           BOk.setOpaque(true);
           BOk.setBackground(theme.getForegroundColor());
           BOk.setForeground(theme.getBackgroundColor());
           BOk.addActionListener(new ActionListener() {
               @Override
               public void actionPerformed(ActionEvent e) {
                   ButtonsActionPerformed(e,JOptionPane.OK_OPTION);
               }
           });
           add(BOk);
           buttons.add(BOk);
       }
     }
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
